| Store the result of read.csv(path2csv, stringsAsFactors = FALSE) in a new
| variable called mydf.

> mydf <- read.csv(path2csv,stringsAsFactors=FALSE)

| Use dim() to look at the dimensions of mydf.

> dim(mydf)
[1] 225468     11

| Now use head() to preview the data.

> head(mydf)
  X       date     time   size r_version r_arch      r_os      package version

> library(dplyr)

| It's important that you have dplyr version 0.4.0 or later. To confirm this,
| type packageVersion("dplyr").

> packageVersion("dplyr")
[1] ‘0.5.0’

|
| The first step of working with data in dplyr is to load the data into what the
| package authors call a 'data frame tbl' or 'tbl_df'. Use the following code to
| create a new tbl_df called cran:

> cran <- tbl_df(mydf)

| To avoid confusion and keep things running smoothly, let's remove the original
| data frame from your workspace with rm("mydf").

> rm("mydf")

> cran
# A tibble: 225,468 × 11
       X       date     time    size r_version r_arch      r_os      package
   <int>      <chr>    <chr>   <int>     <chr>  <chr>     <chr>        <chr>
1      1 2014-07-08 00:54:41   80589     3.1.0 x86_64   mingw32    htmltools
2      2 2014-07-08 00:59:53  321767     3.1.0 x86_64   mingw32      tseries

| As may often be the case, particularly with larger datasets, we are only
| interested in some of the variables. Use select(cran, ip_id, package, country)
| to select only the ip_id, package, and country variables from the cran dataset.

> select(cran, ip_id, package, country)
# A tibble: 225,468 × 3
   ip_id      package country
   <int>        <chr>   <chr>
1      1    htmltools      US
2      2      tseries      US
3      3        party      US

| Normally, this notation is reserved for numbers, but select() allows you to
| specify a sequence of columns this way, which can save a bunch of typing. Use
| select(cran, r_arch:country) to select all columns starting from r_arch and
| ending with country.

> select(cran, r_arch:country)
# A tibble: 225,468 × 5
   r_arch      r_os      package version country
    <chr>     <chr>        <chr>   <chr>   <chr>
1  x86_64   mingw32    htmltools   0.2.4      US
2  x86_64   mingw32      tseries 0.10-32      US
3  x86_64 linux-gnu        party  1.0-15      US

| We can also select the same columns in reverse order. Give it a try.

> select(cran, country:r_arch)
# A tibble: 225,468 × 5
   country version      package      r_os r_arch
     <chr>   <chr>        <chr>     <chr>  <chr>
1       US   0.2.4    htmltools   mingw32 x86_64
2       US 0.10-32      tseries   mingw32 x86_64
3       US  1.0-15        party linux-gnu x86_64

| Print cran to the console to remind yourself what it looks like.

> cran
# A tibble: 225,468 × 11
       X       date     time    size r_version r_arch      r_os      package
   <int>      <chr>    <chr>   <int>     <chr>  <chr>     <chr>        <chr>
1      1 2014-07-08 00:54:41   80589     3.1.0 x86_64   mingw32    htmltools
2      2 2014-07-08 00:59:53  321767     3.1.0 x86_64   mingw32      tseries
3      3 2014-07-08 00:47:13  748063     3.1.0 x86_64 linux-gnu        party


| Instead of specifying the columns we want to keep, we can also specify the
| columns we want to throw away. To see how this works, do select(cran, -time) to
| omit the time column.

> select(cran, -time)
# A tibble: 225,468 × 10
       X       date    size r_version r_arch      r_os      package version
   <int>      <chr>   <int>     <chr>  <chr>     <chr>        <chr>   <chr>
1      1 2014-07-08   80589     3.1.0 x86_64   mingw32    htmltools   0.2.4
2      2 2014-07-08  321767     3.1.0 x86_64   mingw32      tseries 0.10-32
3      3 2014-07-08  748063     3.1.0 x86_64 linux-gnu        party  1.0-15


> -(5:20)
 [1]  -5  -6  -7  -8  -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20

| Use this knowledge to omit all columns X:size using select().

 Use select(cran, -(X:size)) to omit all columns from X through size.

> select(cran, -(X:size))
# A tibble: 225,468 × 7
   r_version r_arch      r_os      package version country ip_id
       <chr>  <chr>     <chr>        <chr>   <chr>   <chr> <int>
1      3.1.0 x86_64   mingw32    htmltools   0.2.4      US     1
2      3.1.0 x86_64   mingw32      tseries 0.10-32      US     2
3      3.1.0 x86_64 linux-gnu        party  1.0-15      US     3

| Use filter(cran, package == "swirl") to select all rows for which the package
| variable is equal to "swirl". Be sure to use two equals signs side-by-side!

>
> filter(cran, package == "swirl")
# A tibble: 820 × 11
       X       date     time   size r_version r_arch         r_os package version
   <int>      <chr>    <chr>  <int>     <chr>  <chr>        <chr>   <chr>   <chr>
1     27 2014-07-08 00:17:16 105350     3.0.2 x86_64      mingw32   swirl   2.2.9
2    156 2014-07-08 00:22:53  41261     3.1.0 x86_64    linux-gnu   swirl   2.2.9
3    358 2014-07-08 00:13:42 105335    2.15.2 x86_64      mingw32   swirl   2.2.9
                                   |  50%

| Again, note that filter() recognizes 'package' as a column of cran, without you
| having to explicitly specify cran$package.

> filter(cran, r_version == "3.1.1", country == "US")
# A tibble: 1,588 × 11
       X       date     time    size r_version r_arch         r_os      package
   <int>      <chr>    <chr>   <int>     <chr>  <chr>        <chr>        <chr>
1   2216 2014-07-08 00:48:58  385112     3.1.1 x86_64 darwin13.1.0   colorspace
2  17332 2014-07-08 03:39:57  197459     3.1.1 x86_64 darwin13.1.0         httr
3  17465 2014-07-08 03:25:38   23259     3.1.1 x86_64 darwin13.1.0         snow

| The conditions passed to filter() can make use of any of the standard
| comparison operators. Pull up the relevant documentation with ?Comparison
| (that's an uppercase C).


| Edit your previous call to filter() to instead return rows corresponding to
| users in "IN" (India) running an R version that is less than or equal to
| "3.0.2". The up arrow on your keyboard may come in handy here. Don't forget
| your double quotes!

> filter(cran, r_version <= "3.0.2", country == "IN")
# A tibble: 4,139 × 11
       X       date     time     size r_version r_arch      r_os       package
   <int>      <chr>    <chr>    <int>     <chr>  <chr>     <chr>         <chr>
1    348 2014-07-08 00:44:04 10218907     3.0.0 x86_64   mingw32            BH
2   9990 2014-07-08 02:11:32   397497     3.0.2 x86_64 linux-gnu     equateIRT
3   9991 2014-07-08 02:11:32   119199     3.0.2 x86_64 linux-gnu      ggdendro

| Our last two calls to filter() requested all rows for which some condition AND
| another condition were TRUE. We can also request rows for which EITHER one
| condition OR another condition are TRUE. For example, filter(cran, country ==
| "US" | country == "IN") will gives us all rows for which the country variable
| equals either "US" or "IN". Give it a go.

> filter(cran,  country == "US" | country == "IN")
# A tibble: 95,283 × 11
       X       date     time    size r_version r_arch      r_os      package
   <int>      <chr>    <chr>   <int>     <chr>  <chr>     <chr>        <chr>
1      1 2014-07-08 00:54:41   80589     3.1.0 x86_64   mingw32    htmltools
2      2 2014-07-08 00:59:53  321767     3.1.0 x86_64   mingw32      tseries
3      3 2014-07-08 00:47:13  748063     3.1.0 x86_64 linux-gnu        party

| Now, use filter() to fetch all rows for which size is strictly greater than (>)
| 100500 (no quotes, since size is numeric) AND r_os equals "linux-gnu". Hint:
| You are passing three arguments to filter(): the name of the dataset, the first
| condition, and the second condition.

> filter(cran,  size > 100500, r_os == "linux-gnu")
# A tibble: 33,683 × 11
       X       date     time    size r_version r_arch      r_os  package version
   <int>      <chr>    <chr>   <int>     <chr>  <chr>     <chr>    <chr>   <chr>
1      3 2014-07-08 00:47:13  748063     3.1.0 x86_64 linux-gnu    party  1.0-15
2      4 2014-07-08 00:48:05  606104     3.1.0 x86_64 linux-gnu    Hmisc  3.14-4
3      7 2014-07-08 00:48:35  393754     3.1.0 x86_64 linux-gnu     plyr   1.8.1

| Finally, we want to get only the rows for which the r_version is not missing. R
| represents missing values with NA and these missing values can be detected
| using the is.na() function.

> filter(cran,  !is.na(r_version))
# A tibble: 207,205 × 11
       X       date     time    size r_version r_arch      r_os      package
   <int>      <chr>    <chr>   <int>     <chr>  <chr>     <chr>        <chr>
1      1 2014-07-08 00:54:41   80589     3.1.0 x86_64   mingw32    htmltools
2      2 2014-07-08 00:59:53  321767     3.1.0 x86_64   mingw32      tseries
3      3 2014-07-08 00:47:13  748063     3.1.0 x86_64 linux-gnu        party

| To see how arrange() works, let's first take a subset of cran. select() all
| columns from size through ip_id and store the result in cran2.

> cran2 <- select(cran,size:ip_id)

| Now, to order the ROWS of cran2 so that ip_id is in ascending order (from small
| to large), type arrange(cran2, ip_id). You may want to make your console wide
| enough so that you can see ip_id, which is the last column.

> arrange(cran2,ip_id)
# A tibble: 225,468 × 8
     size r_version r_arch         r_os     package version country ip_id
    <int>     <chr>  <chr>        <chr>       <chr>   <chr>   <chr> <int>
1   80589     3.1.0 x86_64      mingw32   htmltools   0.2.4      US     1
2  180562     3.0.2 x86_64      mingw32        yaml  2.1.13      US     1
3  190120     3.1.0   i386      mingw32       babel   0.2-6      US     1
| To do the same, but in descending order, change the second argument to desc(ip_id), where desc() stands for
| 'descending'. Go ahead.

> arrange(cran2,desc(ip_id))
# A tibble: 225,468 × 8
      size r_version r_arch         r_os      package version country ip_id
     <int>     <chr>  <chr>        <chr>        <chr>   <chr>   <chr> <int>
1     5933      <NA>   <NA>         <NA>          CPE   1.4.2      CN 13859
2   569241     3.1.0 x86_64      mingw32 multcompView   0.1-5      US 13858
3   228444     3.1.0 x86_64      mingw32        tourr   0.5.3      NZ 13857

| We can also arrange the data according to the values of multiple variables. For example, arrange(cran2,
| package, ip_id) will first arrange by package names (ascending alphabetically), then by ip_id. This means
| that if there are multiple rows with the same value for package, they will be sorted by ip_id (ascending
| numerically). Try arrange(cran2, package, ip_id) now.

> arrange(cran2, package, ip_id)
# A tibble: 225,468 × 8
    size r_version r_arch         r_os package version country ip_id
   <int>     <chr>  <chr>        <chr>   <chr>   <chr>   <chr> <int>
1  71677     3.0.3 x86_64 darwin10.8.0      A3   0.9.2      CN  1003
2  71672     3.1.0 x86_64    linux-gnu      A3   0.9.2      US  1015
3  71677     3.1.0 x86_64      mingw32      A3   0.9.2      IN  1054

| Arrange cran2 by the following three variables, in this order: country (ascending), r_version (descending),
| and ip_id (ascending).

> arrange(cran2, country,desc(r_version), ip_id)
# A tibble: 225,468 × 8
      size r_version r_arch      r_os       package   version country ip_id
     <int>     <chr>  <chr>     <chr>         <chr>     <chr>   <chr> <int>
1  1556858     3.1.1   i386   mingw32 RcppArmadillo 0.4.320.0      A1  2843
2  1823512     3.1.0 x86_64 linux-gnu          mgcv     1.8-1      A1  2843
3    15732     3.1.0   i686 linux-gnu          grnn     0.1.0      A1  3146

| To illustrate the next major function in dplyr, let's take another subset of our original data. Use
| select() to grab 3 columns from cran -- ip_id, package, and size (in that order) -- and store the result in
| a new variable called cran3.

> cran3 <- select(cran, ip_id, package, size)

> cran3
# A tibble: 225,468 × 3
   ip_id      package    size
   <int>        <chr>   <int>
1      1    htmltools   80589
2      2      tseries  321767
3      3        party  748063

| It's common to create a new variable based on the value of one or more variables already in a dataset. The
| mutate() function does exactly this.

| The size variable represents the download size in bytes, which are units of computer memory. These days,
| megabytes (MB) are a more common unit of measurement. One megabyte is equal to 2^20 bytes. That's 2 to the
| power of 20, which is approximately one million bytes!


| We want to add a column called size_mb that contains the download size in megabytes. Here's the code to do
| it:

> mutate(cran3, size_mb = size / 2^20)
# A tibble: 225,468 × 4
   ip_id      package    size     size_mb
   <int>        <chr>   <int>       <dbl>
1      1    htmltools   80589 0.076855659
2      2      tseries  321767 0.306860924
3      3        party  748063 0.713408470

| An even larger unit of memory is a gigabyte (GB), which equals 2^10 megabytes. We might as well add another
| column for download size in gigabytes!

| One very nice feature of mutate() is that you can use the value computed for your second column (size_mb)
| to create a third column, all in the same line of code. To see this in action, repeat the exact same
| command as above, except add a third argument creating a column that is named size_gb and equal to size_mb
| / 2^10.

> mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
# A tibble: 225,468 × 5
   ip_id      package    size     size_mb      size_gb
   <int>        <chr>   <int>       <dbl>        <dbl>
1      1    htmltools   80589 0.076855659 7.329527e-08
2      2      tseries  321767 0.306860924 2.926454e-07
3      3        party  748063 0.713408470 6.803593e-07

| Use mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10) to create two new columns called size_mb
| and size_gb, respectively.

> mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
# A tibble: 225,468 × 5
   ip_id      package    size     size_mb      size_gb
   <int>        <chr>   <int>       <dbl>        <dbl>
1      1    htmltools   80589 0.076855659 7.505435e-05
2      2      tseries  321767 0.306860924 2.996689e-04
3      3        party  748063 0.713408470 6.966880e-04

| Let's try one more for practice. Pretend we discovered a glitch in the system that provided the original
| values for the size variable. All of the values in cran3 are 1000 bytes less than they should be. Using
| cran3, create just one new column called correct_size that contains the correct size.

> mutate(cran3, correct_size = size + 1000)
# A tibble: 225,468 × 4
   ip_id      package    size correct_size
   <int>        <chr>   <int>        <dbl>
1      1    htmltools   80589        81589
2      2      tseries  321767       322767
3      3        party  748063       749063

| The last of the five core dplyr verbs, summarize(), collapses the dataset to a single row. Let's say we're
| interested in knowing the average download size. summarize(cran, avg_bytes = mean(size)) will yield the
| mean value of the size variable. Here we've chosen to label the result 'avg_bytes', but we could have named
| it anything. Give it a try.

> summarize(cran, avg_bytes = mean(size))
# A tibble: 1 × 1
  avg_bytes
      <dbl>
1  844086.5
